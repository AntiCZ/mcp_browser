#!/bin/bash

# Laskobot (Browser MCP Enhanced) - Unified Deployment Script v3.0
# ALL-IN-ONE: Deploy MCP server, Chrome extension, Firefox extension, with rollback & cache clearing

set -e  # Exit on error
set -u  # Exit on undefined variable

# ========== CONFIGURATION ==========
MCP_SERVER_DIR="${MCP_SERVER_DIR:-/home/david/.local/lib/browsermcp-enhanced}"
CHROME_EXT_DIR="${CHROME_EXT_DIR:-$MCP_SERVER_DIR/chrome-extension}"
FIREFOX_EXT_DIR="${FIREFOX_EXT_DIR:-$MCP_SERVER_DIR/firefox-extension}"
BACKUP_DIR="${BACKUP_DIR:-$HOME/.local/backups/browsermcp-enhanced}"
CURRENT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
SCRIPTS_DIR="$CURRENT_DIR/scripts"
CONFIG_FILE="$HOME/.browsermcp-deploy.conf"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# ========== HELPER FUNCTIONS ==========

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "${CYAN}Loading configuration from $CONFIG_FILE${NC}"
        source "$CONFIG_FILE"
    fi
}

save_config() {
    cat > "$CONFIG_FILE" << EOF
# Laskobot Deployment Configuration
# Generated on $(date)
MCP_SERVER_DIR="$MCP_SERVER_DIR"
CHROME_EXT_DIR="$CHROME_EXT_DIR"
FIREFOX_EXT_DIR="$FIREFOX_EXT_DIR"
BACKUP_DIR="$BACKUP_DIR"
LAST_DEPLOY_VERSION="$NEW_VERSION"
LAST_DEPLOY_DATE="$(date +%Y-%m-%d_%H:%M:%S)"
EOF
}

check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ $1${NC}"
        return 0
    else
        echo -e "${RED}✗ $1 failed${NC}"
        return 1
    fi
}

prompt_continue() {
    echo -e "${YELLOW}$1${NC}"
    read -p "Continue? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Deployment cancelled${NC}"
        exit 1
    fi
}

version_compare() {
    local ver1=$1 ver2=$2
    ver1="${ver1#v}" ver2="${ver2#v}"
    IFS='.' read -ra V1 <<< "$ver1"
    IFS='.' read -ra V2 <<< "$ver2"
    
    if [ "${V1[0]}" -gt "${V2[0]}" ]; then echo "1"
    elif [ "${V1[0]}" -lt "${V2[0]}" ]; then echo "-1"
    elif [ "${V1[1]:-0}" -gt "${V2[1]:-0}" ]; then echo "1"
    elif [ "${V1[1]:-0}" -lt "${V2[1]:-0}" ]; then echo "-1"
    elif [ "${V1[2]:-0}" -gt "${V2[2]:-0}" ]; then echo "1"
    elif [ "${V1[2]:-0}" -lt "${V2[2]:-0}" ]; then echo "-1"
    else echo "0"
    fi
}

get_version() {
    local file=$1
    if [ -f "$file" ]; then
        grep '"version"' "$file" | sed -E 's/.*"version": "([^"]+)".*/\1/'
    else
        echo "0.0.0"
    fi
}

is_chrome_running() {
    pgrep -f "/opt/google/chrome" > /dev/null 2>&1
}

create_backup() {
    local backup_name="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S)_v${DEPLOYED_VERSION}"
    echo -e "${BLUE}Creating backup...${NC}"
    mkdir -p "$BACKUP_DIR"
    
    if [ -d "$MCP_SERVER_DIR" ]; then
        cp -r "$MCP_SERVER_DIR" "$backup_name"
        echo -e "${GREEN}✓ Backup created: $backup_name${NC}"
        
        # Keep only last 5 backups
        local backup_count=$(ls -1 "$BACKUP_DIR" | wc -l)
        if [ "$backup_count" -gt 5 ]; then
            echo "Cleaning old backups (keeping last 5)..."
            ls -1t "$BACKUP_DIR" | tail -n +6 | xargs -I {} rm -rf "$BACKUP_DIR/{}"
        fi
        echo "$backup_name"
    else
        echo -e "${YELLOW}No existing installation to backup${NC}"
        echo ""
    fi
}

rollback() {
    echo -e "${RED}========== ROLLBACK MODE ==========${NC}"
    local latest_backup=$(ls -1t "$BACKUP_DIR" 2>/dev/null | head -n 1)
    if [ -z "$latest_backup" ]; then
        echo -e "${RED}No backups found in $BACKUP_DIR${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}Latest backup: $latest_backup${NC}"
    prompt_continue "Restore from this backup?"
    
    echo "Restoring from backup..."
    rm -rf "$MCP_SERVER_DIR"
    cp -r "$BACKUP_DIR/$latest_backup" "$MCP_SERVER_DIR"
    check_status "Rollback completed"
    
    echo -e "${GREEN}Rollback successful!${NC}"
    echo -e "${YELLOW}Remember to restart Claude Desktop and reload browser extension${NC}"
    exit 0
}

force_reload_chrome() {
    echo -e "${YELLOW}========== FORCE RELOAD MODE ==========${NC}"
    echo -e "${CYAN}This will clear Chrome Canary cache and restart${NC}"
    prompt_continue "Proceed with force reload?"

    echo "Step 1: Stopping Chrome Canary..."
    pkill -f "/opt/google/chrome-canary" 2>/dev/null || true
    sleep 2
    pkill -9 -f "/opt/google/chrome-canary" 2>/dev/null || true
    check_status "Chrome Canary stopped"

    echo "Step 2: Clearing Chrome Canary cache..."
    local chrome_data="$HOME/.config/google-chrome-canary"
    rm -rf "$chrome_data/Default/Extension State" 2>/dev/null || true
    rm -rf "$chrome_data/Default/Extension Rules" 2>/dev/null || true
    rm -rf "$chrome_data/Default/Service Worker/CacheStorage" 2>/dev/null || true
    rm -rf "$chrome_data/Default/Service Worker/ScriptCache" 2>/dev/null || true
    check_status "Cache cleared"

    echo "Step 3: Restarting Chrome Canary with cache bypass..."
    DISPLAY="${DISPLAY:-:0}" nohup /opt/google/chrome-canary/google-chrome-canary \
        --disable-application-cache \
        --disable-offline-load-stale-cache \
        --disable-gpu-shader-disk-cache \
        >/dev/null 2>&1 &
    sleep 3
    check_status "Chrome Canary restarted"

    echo -e "${GREEN}Force reload complete! Go to chrome://extensions and reload the extension${NC}"
    exit 0
}

deploy_firefox() {
    echo -e "${YELLOW}========== FIREFOX DEPLOYMENT ==========${NC}"
    
    if [ ! -d "$CURRENT_DIR/firefox-extension" ]; then
        echo -e "${RED}Error: firefox-extension directory not found${NC}"
        exit 1
    fi
    
    echo "Deploying Firefox extension..."
    mkdir -p "$FIREFOX_EXT_DIR"
    cp -r "$CURRENT_DIR/firefox-extension/"* "$FIREFOX_EXT_DIR/"
    check_status "Firefox extension deployed"
    
    if [ -f "$FIREFOX_EXT_DIR/manifest.json" ]; then
        VERSION=$(grep '"version"' "$FIREFOX_EXT_DIR/manifest.json" | sed 's/.*"version": "\([^"]*\)".*/\1/')
        echo -e "${GREEN}✓ Firefox extension ready (version $VERSION)${NC}"
        echo -e "${CYAN}Load in Firefox at: about:debugging${NC}"
    fi
    exit 0
}

show_help() {
    cat << 'HELP_EOF'
Laskobot (Browser MCP Enhanced) - Unified Deployment Script v3.0

USAGE:
  ./scripts/deploy [OPTIONS] [VERSION_TYPE]

OPTIONS:
  --help              Show this help message
  --config            Show current configuration
  --rollback          Rollback to previous backup
  --force-reload      Force reload Chrome Canary with cache clear
  --firefox           Deploy Firefox extension only
  --auto [TYPE]       Auto-deploy with version bump (patch|minor|major, default: minor)

VERSION TYPES (for --auto):
  patch               Bump patch version (x.x.X) - Bug fixes
  minor               Bump minor version (x.X.0) - New features (DEFAULT)
  major               Bump major version (X.0.0) - Breaking changes

EXAMPLES:
  ./scripts/deploy                    # Interactive deployment (defaults to minor bump)
  ./scripts/deploy --auto             # Auto-deploy with minor bump (default)
  ./scripts/deploy --auto patch       # Auto-deploy with patch bump
  ./scripts/deploy --rollback         # Rollback to last backup
  ./scripts/deploy --force-reload     # Force reload Chrome Canary extension
  ./scripts/deploy --firefox          # Deploy Firefox extension
  ./scripts/deploy --config           # Show configuration

FEATURES:
  • Automatic version management with validation
  • Source vs deployed version comparison
  • Backup with 5-backup retention
  • Rollback capability
  • Chrome and Firefox support
  • Force reload with cache clearing
  • Configuration persistence

HELP_EOF
    exit 0
}

# ========== MAIN SCRIPT ==========

# Parse command line arguments
AUTO_MODE=false
VERSION_CHOICE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h) show_help ;;
        --config) load_config; echo -e "${CYAN}Configuration:${NC}"; echo "  MCP Server: $MCP_SERVER_DIR"; echo "  Chrome Ext: $CHROME_EXT_DIR"; echo "  Firefox Ext: $FIREFOX_EXT_DIR"; echo "  Backup Dir: $BACKUP_DIR"; exit 0 ;;
        --rollback) rollback ;;
        --force-reload) force_reload_chrome ;;
        --firefox) deploy_firefox ;;
        --auto)
            AUTO_MODE=true
            shift
            VERSION_CHOICE="${1:-minor}"
            ;;
        patch|minor|major)
            if [ "$AUTO_MODE" = true ]; then
                VERSION_CHOICE="$1"
            fi
            ;;
        *) echo -e "${RED}Unknown option: $1${NC}"; echo "Use --help for usage"; exit 1 ;;
    esac
    shift
done

echo -e "${BOLD}${BLUE}╔══════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${BLUE}║     Laskobot - Unified Deployment v3.0      ║${NC}"
echo -e "${BOLD}${BLUE}╚══════════════════════════════════════════════╝${NC}"
echo ""

load_config

# Step 1: Environment Check
echo -e "${BOLD}${BLUE}[1/10] Environment Check${NC}"
echo "----------------------------------------"

if [ ! -f "$CURRENT_DIR/package.json" ]; then
    echo -e "${RED}✗ Error: Not in project directory${NC}"
    exit 1
fi

if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    echo -e "${RED}✗ Node.js or npm not installed${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Environment ready${NC}"
echo "  Working directory: $CURRENT_DIR"
echo "  Node: $(node -v) | npm: $(npm -v)"

# Step 2: Version Analysis
echo ""
echo -e "${BOLD}${BLUE}[2/10] Version Analysis${NC}"
echo "----------------------------------------"

CURRENT_VERSION=$(get_version "$CURRENT_DIR/package.json")
DEPLOYED_VERSION=$(get_version "$MCP_SERVER_DIR/package.json")

echo "  Source version:    ${CYAN}$CURRENT_VERSION${NC}"
echo "  Deployed version:  ${MAGENTA}$DEPLOYED_VERSION${NC}"

COMPARISON=$(version_compare "$CURRENT_VERSION" "$DEPLOYED_VERSION")
if [ "$COMPARISON" = "1" ]; then
    echo -e "${GREEN}  → Source is newer${NC}"
elif [ "$COMPARISON" = "-1" ]; then
    echo -e "${YELLOW}  ⚠ Deployed is newer!${NC}"
elif [ "$COMPARISON" = "0" ]; then
    echo -e "${YELLOW}  → Versions identical${NC}"
fi

# Step 3: Version Management
echo ""
echo -e "${BOLD}${BLUE}[3/10] Version Management${NC}"
echo "----------------------------------------"
echo "Current version: $CURRENT_VERSION"
echo ""

if [ "$AUTO_MODE" = true ]; then
    case "$VERSION_CHOICE" in
        patch) version_choice=1 ;;
        minor) version_choice=2 ;;
        major) version_choice=3 ;;
        *) echo -e "${RED}Invalid auto version type (use: patch|minor|major)${NC}"; exit 1 ;;
    esac
    echo -e "${CYAN}Auto mode: $VERSION_CHOICE (always bumps version)${NC}"
else
    echo "Select version bump type:"
    echo "  ${BOLD}1)${NC} Patch (x.x.${BOLD}X${NC}) - Bug fixes"
    echo "  ${BOLD}2)${NC} Minor (x.${BOLD}X${NC}.0) - New features (default)"
    echo "  ${BOLD}3)${NC} Major (${BOLD}X${NC}.0.0) - Breaking changes"
    echo "  ${BOLD}4)${NC} Custom version"
    read -p "Choice (1-4, default 2): " version_choice
    version_choice="${version_choice:-2}"
fi

case $version_choice in
    1) npm version patch --no-git-tag-version > /dev/null 2>&1; NEW_VERSION=$(get_version "$CURRENT_DIR/package.json"); echo -e "${GREEN}✓ Bumped to: $NEW_VERSION (patch)${NC}" ;;
    2) npm version minor --no-git-tag-version > /dev/null 2>&1; NEW_VERSION=$(get_version "$CURRENT_DIR/package.json"); echo -e "${GREEN}✓ Bumped to: $NEW_VERSION (minor)${NC}" ;;
    3) npm version major --no-git-tag-version > /dev/null 2>&1; NEW_VERSION=$(get_version "$CURRENT_DIR/package.json"); echo -e "${GREEN}✓ Bumped to: $NEW_VERSION (major)${NC}" ;;
    4) read -p "Enter version: " NEW_VERSION; [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo -e "${RED}Invalid format${NC}" && exit 1; sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$CURRENT_DIR/package.json"; echo -e "${GREEN}✓ Set to: $NEW_VERSION${NC}" ;;
    *) echo -e "${RED}Invalid choice${NC}"; exit 1 ;;
esac

# Step 4-5: Dependencies & Build
echo ""
echo -e "${BOLD}${BLUE}[4/10] Dependencies${NC}"
echo "----------------------------------------"
[ ! -d "$CURRENT_DIR/node_modules" ] && npm install || echo -e "${GREEN}✓ Dependencies OK${NC}"

echo ""
echo -e "${BOLD}${BLUE}[5/10] Building${NC}"
echo "----------------------------------------"
npm run build
check_status "Build completed"

# Step 6: Backup
echo ""
echo -e "${BOLD}${BLUE}[6/10] Backup${NC}"
echo "----------------------------------------"
BACKUP_PATH=$(create_backup)

# Step 7: Deploy MCP Server
echo ""
echo -e "${BOLD}${BLUE}[7/10] Deploying MCP Server${NC}"
echo "----------------------------------------"
mkdir -p "$MCP_SERVER_DIR/dist"
cp -r "$CURRENT_DIR/dist/"* "$MCP_SERVER_DIR/dist/"
cp "$CURRENT_DIR/package.json" "$MCP_SERVER_DIR/"
cp "$CURRENT_DIR/package-lock.json" "$MCP_SERVER_DIR/" 2>/dev/null || true
check_status "MCP Server deployed"

# Step 8: Deploy Chrome Extension
echo ""
echo -e "${BOLD}${BLUE}[8/10] Deploying Chrome Extension${NC}"
echo "----------------------------------------"
mkdir -p "$CHROME_EXT_DIR"
cp -r "$CURRENT_DIR/chrome-extension/"* "$CHROME_EXT_DIR/"
if [ -f "$CHROME_EXT_DIR/manifest.json" ]; then
    sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$CHROME_EXT_DIR/manifest.json"
fi

# Also bump repository manifest to keep repo and deployed in sync
if [ -f "$CURRENT_DIR/chrome-extension/manifest.json" ]; then
    sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$CURRENT_DIR/chrome-extension/manifest.json"
fi
check_status "Chrome extension deployed"

# Step 9: Chrome Management
echo ""
echo -e "${BOLD}${BLUE}[9/10] Browser Management${NC}"
echo "----------------------------------------"
if is_chrome_running && [ "$AUTO_MODE" = false ]; then
    echo -e "${YELLOW}Chrome is running${NC}"
    read -p "Restart Chrome? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        "$SCRIPTS_DIR/chrome-canary-restart.sh" restart 2>/dev/null || true
    fi
else
    echo -e "${CYAN}Chrome not running or auto mode${NC}"
fi

# Step 10: Summary
echo ""
echo -e "${BOLD}${BLUE}[10/10] Summary${NC}"
echo "----------------------------------------"
save_config

echo -e "${BOLD}${GREEN}╔══════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${GREEN}║         DEPLOYMENT SUCCESSFUL! 🎉            ║${NC}"
echo -e "${BOLD}${GREEN}╚══════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${BOLD}Version: ${CYAN}$NEW_VERSION${NC}"
echo ""
echo -e "${BOLD}Locations:${NC}"
echo "  → MCP Server: ${BLUE}$MCP_SERVER_DIR${NC}"
echo "  → Chrome Ext: ${BLUE}$CHROME_EXT_DIR${NC}"
echo "  → Backup:     ${BLUE}$BACKUP_PATH${NC}"
echo ""
echo -e "${BOLD}${YELLOW}Next Steps:${NC}"
echo "  1. ${YELLOW}Restart Claude Desktop${NC}"
echo "  2. Go to ${CYAN}chrome://extensions${NC}"
echo "  3. Click ${CYAN}Reload${NC} on extension"
echo ""

if command -v git &> /dev/null && [ -d .git ] && [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
    echo -e "${YELLOW}Tip: git add -A && git commit -m 'chore: bump to $NEW_VERSION'${NC}"
fi

echo ""
echo -e "${GREEN}✨ Done! ${CYAN}Use ./scripts/deploy --rollback to revert${NC}"
