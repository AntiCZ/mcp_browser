--- a/tmp/codex/codex-rs/core/src/codex.rs
+++ b/tmp/codex/codex-rs/core/src/codex.rs
@@ -2101,7 +2101,29 @@ async fn try_run_turn(
                             items_to_record_in_conversation_history.push(item);
                             let output = match result {
                                 Ok(call_tool_result) => {
-                                    convert_call_tool_result_to_function_call_output_payload(
+                                    // Check if the MCP result contains images
+                                    let has_images = call_tool_result.content.iter().any(|block| {
+                                        matches!(block, mcp_types::ContentBlock::ImageContent(_))
+                                    });
+
+                                    if has_images {
+                                        // Convert image content to proper message format
+                                        let mut content_items = Vec::new();
+                                        for block in &call_tool_result.content {
+                                            match block {
+                                                mcp_types::ContentBlock::ImageContent(img) => {
+                                                    let image_url = format!("data:{};base64,{}",
+                                                        img.mime_type, img.data);
+                                                    content_items.push(protocol::models::ContentItem::InputImage {
+                                                        image_url
+                                                    });
+                                                }
+                                                mcp_types::ContentBlock::TextContent(txt) => {
+                                                    content_items.push(protocol::models::ContentItem::OutputText {
+                                                        text: txt.text.clone()
+                                                    });
+                                                }
+                                                _ => {}
+                                            }
+                                        }
+
+                                        // Return as a message with image support instead of function output
+                                        processed_items.push(ProcessedResponseItem::Event(Event {
+                                            id: sess.conversation_id.clone(),
+                                            msg: EventMsg::ToolCallOutput {
+                                                output: protocol::models::ResponseItem::Message {
+                                                    id: None,
+                                                    role: "tool".to_string(),
+                                                    content: content_items,
+                                                },
+                                                call_id: call_id.clone(),
+                                            },
+                                        }));
+                                        // Skip the normal function output processing
+                                        continue;
+                                    } else {
+                                        // No images, use the original conversion
+                                        convert_call_tool_result_to_function_call_output_payload(
+                                            call_tool_result,
+                                        )
+                                    }
                                         call_tool_result,
                                     )
                                 }